using System;
using System.Collections.Generic;
using System.Text;
using BryantBrothers.WindCave.WindCave.PxPay.Enums;

namespace BryantBrothers.WindCave.PxPay
{
	/// <summary>
	/// Stores details about a PxPay Transaction.
	/// </summary>
	public class TransactionDetails
	{
		/// <summary>
		/// True if the initial transaction request was valid.  False is not.
		/// </summary>
		public bool ValidTransaction { get; set; }

		/// <summary>
		/// The amount of funds settled with your bank for the transaction (in cents).
		/// </summary>
		public int AmountSettlement { get; set; }

		/// <summary>
		/// Authorisation code returned for approved transactions from the acquirer.
		/// </summary>
		public string AuthCode { get; set; }

		/// <summary>
		/// The card type used for the transaction (e.g. "Visa", "MasterCard", etc). 
		/// Please refrain from processing any logic based on the value of CardName as it is subject to change from Windcave.
		/// </summary>
		public string CardName { get; set; }

		/// <summary>
		/// The card number used for the transaction. The full credit card number isn't shown, however the bin range is given(first 6 characters) depending on masking pattern set
		/// </summary>
		public string CardNumber { get; set; }

		/// <summary>
		/// The expiry date of the card used in the transaction.
		/// </summary>
		public string DateExpiry { get; set; }

		/// <summary>
		/// A DpsTxnRef is returned for every transaction. If the transaction was approved, DpsTxnRef can be used
		/// as input to a Refund transaction i.e.used to specify a transaction for refund without supplying the
		/// original card number and expiry date.
		/// </summary>
		public string DpsTxnRef { get; set; }

		/// <summary>
		/// Indicates success or failure of the transaction.  False indicates the transaction was declined or there was an error.
		/// </summary>
		public bool Success { get; set; }

		/// <summary>
		/// Response Text associated with the response code of the transaction.
		/// </summary>
		public string ResponseText { get; set; }

		/// <summary>
		/// When output, contains the Windcave generated BillingId. Only returned for transactions that are
		/// requested by the application with the EnableAddBillCard value is set to true indicating a token billing
		/// entry should be created.
		/// </summary>
		public string DpsBillingId { get; set; }

		/// <summary>
		/// The cardholder name as it appears on customer card.
		/// </summary>
		public string CardHolderName { get; set; }

		/// <summary>
		/// Used to specify the currency that was used for the transaction: AUD, USD, NZD etc.
		/// </summary>
		public PxPayCurrency CurrencySettlement { get; set; }

		/// <summary>
		/// The final transaction response can contain the PaymentMethod field to indicate the specific payment method used for the transaction.
		/// If this field does not exist in the final transaction response then a card payment method was used by default.
		/// </summary>
		public string PaymentMethod { get; set; }

		/// <summary>
		/// Free text field passed to the transaction request.
		/// </summary>
		public string TxnData1 { get; set; }

		/// <summary>
		/// Free text field passed to the transaction request.
		/// </summary>
		public string TxnData2 { get; set; }

		/// <summary>
		/// Free text field passed to the transaction request.
		/// </summary>
		public string TxnData3 { get; set; }

		/// <summary>
		/// The transaction type used. 
		/// </summary>
		public TransactionType TxnType { get; set; }

		/// <summary>
		/// The currency requested for the transaction.
		/// </summary>
		public PxPayCurrency CurrencyInput { get; set; }

		/// <summary>
		/// The merchant reference passed to the transaction.
		/// </summary>
		public string MerchantReference { get; set; }

		/// <summary>
		/// The IP address of the user who processed the transaction.
		/// </summary>
		public string ClientIpAddress { get; set; }

		/// <summary>
		/// The unique transaction ID passed to the transaction request.
		/// </summary>
		public string TxnId { get; set; }

		/// <summary>
		/// The customers email address passed to the transaction.
		/// </summary>
		public string EmailAddress { get; set; }

		/// <summary>
		/// Billing ID passed via the transaction and is used for token based billing to identify the customer or billing entry and can be used as input instead of card number and date expiry for subsequent billing transactions.
		/// </summary>
		public string BillingId { get; set; }

		/// <summary>
		/// Indication of the uniqueness of a card number.
		/// </summary>
		public string TxnMac { get; set; }

		/// <summary>
		/// A token generated by Windcave when adding a card for recurring billing. CardNumber2 is a 16 digit
		/// number which conforms to a Luhn 'mod 10' algorithm and has a 1-to-1 relationship with the actual card
		/// number used
		/// </summary>
		public string CardNumber2 { get; set; }

		/// <summary>
		/// The result of CVC validation.
		/// M - CVC matched
		/// N - CVC did not match
		/// P - CVC request not processed
		/// S - CVC should be on the card, but merchant has sent code indicating there was no CVC.
		/// U - Issuer does not support CVC
		/// </summary>
		public CvcResultCode Cvc2ResultCode { get; set; }
	}
}
